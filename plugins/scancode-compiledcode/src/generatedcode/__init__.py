#
# Copyright (c) 2019 nexB Inc. and others. All rights reserved.
# http://nexb.com and https://github.com/nexB/scancode-toolkit/
# The ScanCode software is licensed under the Apache License version 2.0.
# Data generated with ScanCode require an acknowledgment.
# ScanCode is a trademark of nexB Inc.
#
# You may not use this software except in compliance with the License.
# You may obtain a copy of the License at: http://apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
#
# When you publish or redistribute any data created with ScanCode or any ScanCode
# derivative work, you must accompany this data with the following acknowledgment:
#
#  Generated with ScanCode and provided on an "AS IS" BASIS, WITHOUT WARRANTIES
#  OR CONDITIONS OF ANY KIND, either express or implied. No content created from
#  ScanCode should be considered or used as legal advice. Consult an Attorney
#  for any legal advice.
#  ScanCode is a free software code scanning tool from nexB Inc. and others.
#  Visit https://github.com/nexB/scancode-toolkit/ for support and download.

from __future__ import absolute_import
from __future__ import unicode_literals


from collections import OrderedDict
from collections import namedtuple
from functools import partial
from itertools import chain
from itertools import islice
import re

import attr

import commoncode.text

from plugincode.scan import ScanPlugin
from plugincode.scan import scan_impl
from scancode import CommandLineOption
from scancode import SCAN_GROUP
from textcode import analysis
from typecode import contenttype


@scan_impl
class GeneratedCodeScanner(ScanPlugin):
    """
    Parse the snippet that is possibly generated code.
    """
    resource_attributes = OrderedDict(
        generatedcode=attr.ib(default=attr.Factory(list), repr=False),
    )

    options = [
        CommandLineOption(('--generatedcode',),
                          is_flag=True, default=False,
                          help='Get the snippet that is possibly generated code.',
                          help_group=SCAN_GROUP,
                          sort_order=100),
    ]

    def is_enabled(self, generatedcode, **kwargs):
        return generatedcode

    def get_scanner(self, **kwargs):
        return generatedcode_scan


generated_keywords = (
    'generated by',
    'auto-generated',
    'automatically generated',
    # Apache Axis
    'auto-generated from WSDL',
    # jni javahl and others
    'do not edit this file',
    # jni javahl
    'it is machine generated',
    'by hibernate tools',
    'generated from idl',
    # castor generated files
    'following schema fragment specifies the',
    # Tomcat JSPC
    'automatically created by',
    # in GNU Classpath
    'This file was automatically generated by gnu.localegen from CLDR',
    'This document is automatically generated by gnu.supplementgen',
    # linux kernel/u-boot
    'This was automagically generated from',
    # Angular
    'THIS CODE IS GENERATED',
)


max_lines = 150


def generatedcode_scan(location, **kwargs):
    '''
    Return a line of extracted text from a file if that file is likely
    generated source code.

    for each of the the first few lines of a source code file
      if generated keywords are found in the line as lowercase
         yield the line text as a 'potentially_ generated' annotation
    '''
    T = contenttype.get_type(location)
    if not T.is_text:
        return
    
    results = []
    with open(location, 'rb') as filein:
        for line in islice(filein, max_lines):
            text = commoncode.text.toascii(line.strip())
            textl = text.lower()
            if any(kw in textl for kw in generated_keywords):
                # yield only the first 100 chars
                if len(text) > 100:
                    results.append(text[:100])
                else:
                    results.append(text)
    return dict(generatedcode=results)
