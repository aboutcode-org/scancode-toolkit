Usage: scancode [OPTIONS] <input> <OUTPUT FORMAT OPTION(s)>

  scan the <input> file or directory for license, origin and packages and save
  results to FILE(s) using one or more output format option.

  Error and progress are printed to stderr.

Options:

  primary scans:
    -l, --license    Scan <input> for licenses.
    -p, --package    Scan <input> for packages.
    -c, --copyright  Scan <input> for copyrights.

  other scans:
    -i, --info   Scan <input> for file information (size, type, checksums, etc).
    -e, --email  Scan <input> for emails.
    -u, --url    Scan <input> for urls.

  scan options:
    --license-diag               Include diagnostic information in license scan
                                 results.
    --license-score INTEGER      Do not return license matches with a score lower
                                 than this score. A number between 0 and 100.
                                 [default: 0]
    --license-text               Include the detected licenses matched text.
    --license-url-template TEXT  Set the template URL used for the license
                                 reference URLs. Curly braces ({}) are replaced by
                                 the license key.  [default: https://enterprise.de
                                 jacode.com/urn/urn:dje:license:{}]

  output formats:
    --json FILE             Write scan output as compact JSON to FILE.
    --json-pp FILE          Write scan output as pretty-printed JSON to FILE.
    --json-lines FILE       Write scan output as JSON Lines to FILE.
    --output-csv FILE       Write scan output as CSV to FILE.
    --output-html FILE      Write scan output as HTML to FILE.
    --output-custom FILE    Write scan output to FILE formatted with the custom
                            Jinja template file.
    --custom-template FILE  Use this Jinja template FILE as a custom template.
    --output-html-app FILE  Write scan output as a mini HTML application to FILE.
    --output-spdx-rdf FILE  Write scan output as SPDX RDF to FILE.
    --output-spdx-tv FILE   Write scan output as SPDX Tag/Value to FILE.

  output filters:
    --only-findings  Only return files or directories with findings for the
                     requested scans. Files and directories without findings are
                     omitted (file information is not treated as findings).

  output control:
    --full-root   Report full, absolute paths. The default is to always include
                  the last directory segment of the scanned path such that all
                  paths have a common root directory.
    --strip-root  Strip the root directory segment of all paths. The default is to
                  always include the last directory segment of the scanned path
                  such that all paths have a common root directory.

  pre-scan:
    --ignore <pattern>  Ignore files matching <pattern>.

  post-scan:
    --mark-source  Set the "is_source" to true for directories that contain over
                   90% of source files as children and descendants. Count the
                   number of source files in a directory as a new
                   source_file_counts attribute

  core:
    --timeout <secs>         Stop an unfinished file scan after a timeout in
                             seconds.  [default: 120 seconds]
    -n, --processes INT      Set the number of parallel processes to use. Disable
                             parallel processing if 0. Also disable threading if
                             -1. [default: 1]
    --quiet                  Do not print summary or progress.
    --verbose                Print progress  as file-by-file path instead of a
                             progress bar. Print a verbose scan summary.
    --cache-dir DIR          Set the path to an existing directory where ScanCode
                             can cache files available across runs.If not set, the
                             value of the `SCANCODE_CACHE` environment variable is
                             used if available. If `SCANCODE_CACHE` is not set, a
                             default sub-directory in the user home directory is
                             used instead. [default: ~/.cache/scancode-tk/version]
    --temp-dir DIR           Set the path to an existing directory where ScanCode
                             can create temporary files. If not set, the value of
                             the `SCANCODE_TMP` environment variable is used if
                             available. If `SCANCODE_TMP` is not set, a default
                             sub-directory in the system temp directory is used
                             instead.  [default: TMP/scancode-tk-<key>]
    --timing                 Collect scan timing for each scan/scanned file.
    --max-in-memory INTEGER  Maximum number of files and directories scan details
                             kept in memory during a scan. Additional files and
                             directories scan details above this number are cached
                             on-disk rather than in memory. Use 0 to use unlimited
                             memory and disable on-disk caching. Use -1 to use
                             only on-disk caching.  [default: 10000]

  miscellaneous:
    --reindex-licenses  Check the license index cache and reindex if needed and
                        exit.
    --test-mode         Run ScanCode in a special "test mode". Only for testing.

  documentation:
    -h, --help  Show this message and exit.
    --about     Show information about ScanCode and licensing and exit.
    --version   Show the version and exit.
    --examples  Show command examples and exit.
    --plugins   Show the list of available ScanCode plugins and exit.

  Examples (use --examples for more):

  Scan the 'samples' directory for licenses and copyrights.
  Save scan results to the 'scancode_result.json' JSON file:

      scancode --license --copyright --json=scancode_result.json samples

  Scan the 'samples' directory for licenses and package manifests. Print scan
  results on screen as pretty-formatted JSON (using the special '-' FILE to print
  to on screen/to stdout):

      scancode --json-pp - --license --package  samples

  Note: when you run scancode, a progress bar is displayed with a counter of
  the number of files processed. Use --verbose to display file-by-file
  progress.
