_C_ License Applicability. Except to the extent portions of this file are
_C_ made subject to an alternative license as permitted in the SGI Free
_C_ Software License B, Version 1.1 (the "License"), the contents of this
_C_ file are subject only to the provisions of the License. You may not use
_C_ this file except in compliance with the License. You may obtain a copy
_C_ of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
_C_ Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
_C_
_C_ http://oss.sgi.com/projects/FreeB
_C_
_C_ Note that, as provided in the License, the Software is distributed on an
_C_ "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
_C_ DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
_C_ CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
_C_ PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
_C_
_C_ Original Code. The Original Code is: OpenGL Sample Implementation,
_C_ Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
_C_ Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
_C_ Copyright in any portions created by third parties is as indicated
_C_ elsewhere herein. All Rights Reserved.
_C_
_C_ Additional Notice Provisions: The application programming interfaces
_C_ established by SGI in conjunction with the Original Code are The
_C_ OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
_C_ April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
_C_ 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
_C_ Window System(R) (Version 1.3), released October 19, 1998. This software
_C_ was created using the OpenGL(R) version 1.2.1 Sample Implementation
_C_ published by SGI, but has not been independently verified as being
_C_ compliant with the OpenGL(R) version 1.2.1 Specification.
_C_
_C_ The first character in this file must be an '_'!
_C_ Anything on a line after _C_ is ignored
_define(_filters,tbl|eqn)_C_
_C_ eqn is automatically replaced with neqn for nroff
_header(Accum,operate on the accumulation buffer)
_names(Accum)
.EQ
delim $$
.EN
.SH PARAMETERS
_phead(_param1)
Specifies the accumulation buffer operation.
Symbolic constants
_const(ACCUM),
_const(LOAD),
_const(ADD),
_const(MULT),
and
_const(RETURN) are accepted.
_phead(_param2)
Specifies a floating-point value used in the accumulation buffer operation.
_param1 determines how _param2 is used.
.SH DESCRIPTION
The accumulation buffer is an extended-range color buffer.
Images are not rendered into it.
Rather,
images rendered into one of the color buffers
are added to the contents of the accumulation buffer after rendering.
Effects such as antialiasing (of points, lines, and polygons),
motion blur,
and depth of field can be created
by accumulating images generated with different transformation matrices.
.P
Each pixel in the accumulation buffer consists of
red, green, blue, and alpha values.
The number of bits per component in the accumulation buffer
depends on the implementation. You can examine this number
by calling _cmnd(GetIntegerv) four times,
with arguments _const(ACCUM_RED_BITS),
_const(ACCUM_GREEN_BITS),
_const(ACCUM_BLUE_BITS),
and _const(ACCUM_ALPHA_BITS).
Regardless of the number of bits per component,
the range of values stored by each component is [\-1,\ 1].
The accumulation buffer pixels are mapped one-to-one with frame buffer pixels.
.P
_cmnd operates on the accumulation buffer.
The first argument, _param1,
is a symbolic constant that selects an accumulation buffer operation.
The second argument, _param2,
is a floating-point value to be used in that operation.
Five operations are specified:
_const(ACCUM), _const(LOAD), _const(ADD),
_const(MULT), and _const(RETURN).
.P
All accumulation buffer operations are limited
to the area of the current scissor box and applied identically to
the red, green, blue, and alpha components of each pixel.
If a _cmnd operation results in a value outside the range [\-1,\ 1],
the contents of an accumulation buffer pixel component are undefined.
.P
The operations are as follows:
.TP 14
_const(ACCUM)
Obtains R, G, B, and A values
from the buffer currently selected for reading (see _cmnd(ReadBuffer)).
Each component value is divided by $2 sup n^-^1$,
where $n$ is the number of bits allocated to each color component
in the currently selected buffer.
The result is a floating-point value in the range [0,\ 1],
which is multiplied by _param2 and added to the corresponding pixel component
in the accumulation buffer,
thereby updating the accumulation buffer.
.TP
_const(LOAD)
Similar to _const(ACCUM),
except that the current value in the accumulation buffer is not used
in the calculation of the new value.
That is, the R, G, B, and A values from the currently selected buffer
are divided by $2 sup n^-^1$,
multiplied by _param2,
and then stored in the corresponding accumulation buffer cell,
overwriting the current value.
.TP
_const(ADD)
Adds _param2 to each R, G, B, and A
in the accumulation buffer.
.TP
_const(MULT)
Multiplies each R, G, B, and A
in the accumulation buffer by _param2 and returns the scaled component
to its corresponding accumulation buffer location.
.TP
_const(RETURN)
Transfers accumulation buffer values
to the color buffer or buffers currently selected for writing.
Each R, G, B, and A component is multiplied by _param2,
then multiplied by $2 sup n^-^1$,
clamped to the range [0,$~2 sup n^-^1 $], and stored
in the corresponding display buffer cell.
The only fragment operations that are applied to this transfer are
pixel ownership,
scissor,
dithering,
and color writemasks.
.P
To clear the accumulation buffer, call _cmnd(ClearAccum) with R, G, B,
and A values to set it to, then call _cmnd(Clear) with the
accumulation buffer enabled.
.SH NOTES
Only pixels within the current scissor box are updated by a
_cmnd operation.
.SH ERRORS
_const(INVALID_ENUM) is generated if _param1 is not an accepted value.
.P
_const(INVALID_OPERATION) is generated if there is no accumulation buffer.
.P
_const(INVALID_OPERATION) is generated if _cmnd
is executed between the execution of
_cmnd(Begin) and the corresponding execution of _cmnd(End).
.SH ASSOCIATED GETS
_cmnd(Get) with argument _const(ACCUM_RED_BITS)
.br
_cmnd(Get) with argument _const(ACCUM_GREEN_BITS)
.br
_cmnd(Get) with argument _const(ACCUM_BLUE_BITS)
.br
_cmnd(Get) with argument _const(ACCUM_ALPHA_BITS)
.SH SEE ALSO
_cmnd(Clear),
_cmnd(ClearAccum),
_cmnd(CopyPixels),
_cmnd(DrawBuffer),
_cmnd(Get),
_cmnd(ReadBuffer),
_cmnd(ReadPixels),
_cmnd(Scissor),
_cmnd(StencilOp)
