/* -----------------------------------------------------------------------------------------------------------
   Software License for The Fraunhofer FDK AAC Codec Library for Android

   © Copyright 1995 - 2013 Fraunhofer-Gesellschaft zur Förderung der angewandten Forschung e.V.
   All rights reserved.

   1. INTRODUCTION
   The Fraunhofer FDK AAC Codec Library for Android ("FDK AAC Codec") is software that implements
   the MPEG Advanced Audio Coding ("AAC") encoding and decoding scheme for digital audio.
   This FDK AAC Codec software is intended to be used on a wide variety of Android devices.

   AAC's HE-AAC and HE-AAC v2 versions are regarded as today's most efficient general perceptual
   audio codecs. AAC-ELD is considered the best-performing full-bandwidth communications codec by
   independent studies and is widely deployed. AAC has been standardized by ISO and IEC as part
   of the MPEG specifications.

   Patent licenses for necessary patent claims for the FDK AAC Codec (including those of Fraunhofer)
   may be obtained through Via Licensing (www.vialicensing.com) or through the respective patent owners
   individually for the purpose of encoding or decoding bit streams in products that are compliant with
   the ISO/IEC MPEG audio standards. Please note that most manufacturers of Android devices already license
   these patent claims through Via Licensing or directly from the patent owners, and therefore FDK AAC Codec
   software may already be covered under those patent licenses when it is used for those licensed purposes only.

   Commercially-licensed AAC software libraries, including floating-point versions with enhanced sound quality,
   are also available from Fraunhofer. Users are encouraged to check the Fraunhofer website for additional
   applications information and documentation.

   2. COPYRIGHT LICENSE

   Redistribution and use in source and binary forms, with or without modification, are permitted without
   payment of copyright license fees provided that you satisfy the following conditions:

   You must retain the complete text of this software license in redistributions of the FDK AAC Codec or
   your modifications thereto in source code form.

   You must retain the complete text of this software license in the documentation and/or other materials
   provided with redistributions of the FDK AAC Codec or your modifications thereto in binary form.
   You must make available free of charge copies of the complete source code of the FDK AAC Codec and your
   modifications thereto to recipients of copies in binary form.

   The name of Fraunhofer may not be used to endorse or promote products derived from this library without
   prior written permission.

   You may not charge copyright license fees for anyone to use, copy or distribute the FDK AAC Codec
   software or your modifications thereto.

   Your modified versions of the FDK AAC Codec must carry prominent notices stating that you changed the software
   and the date of any change. For modified versions of the FDK AAC Codec, the term
   "Fraunhofer FDK AAC Codec Library for Android" must be replaced by the term
   "Third-Party Modified Version of the Fraunhofer FDK AAC Codec Library for Android."

   3. NO PATENT LICENSE

   NO EXPRESS OR IMPLIED LICENSES TO ANY PATENT CLAIMS, including without limitation the patents of Fraunhofer,
   ARE GRANTED BY THIS SOFTWARE LICENSE. Fraunhofer provides no warranty of patent non-infringement with
   respect to this software.

   You may use this FDK AAC Codec software or modifications thereto only for purposes that are authorized
   by appropriate patent licenses.

   4. DISCLAIMER

   This FDK AAC Codec software is provided by Fraunhofer on behalf of the copyright holders and contributors
   "AS IS" and WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, including but not limited to the implied warranties
   of merchantability and fitness for a particular purpose. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
   CONTRIBUTORS BE LIABLE for any direct, indirect, incidental, special, exemplary, or consequential damages,
   including but not limited to procurement of substitute goods or services; loss of use, data, or profits,
   or business interruption, however caused and on any theory of liability, whether in contract, strict
   liability, or tort (including negligence), arising in any way out of the use of this software, even if
   advised of the possibility of such damage.

5. CONTACT INFORMATION

Fraunhofer Institute for Integrated Circuits IIS
Attention: Audio and Multimedia Departments - FDK AAC LL
Am Wolfsmantel 33
91058 Erlangen, Germany

www.iis.fraunhofer.de/amm
amm-info@iis.fraunhofer.de
----------------------------------------------------------------------------------------------------------- */

/***************************** MPEG-4 AAC Decoder **************************

  Author(s): Christian Griebel
  Description: Dynamic range control (DRC) decoder tool for AAC

  ******************************************************************************/

#include "aacdec_drc.h"


#include "channelinfo.h"
#include "aac_rom.h"

#include "sbrdecoder.h"

/*
   * Dynamic Range Control
   */

/* For parameter conversion */
#define DRC_PARAMETER_BITS ( 7 )
#define DRC_MAX_QUANT_STEPS ( 1<<DRC_PARAMETER_BITS )
#define DRC_MAX_QUANT_FACTOR ( DRC_MAX_QUANT_STEPS-1 )
#define DRC_PARAM_QUANT_STEP ( FL2FXCONST_DBL(1.0f/(float)DRC_MAX_QUANT_FACTOR) )
#define DRC_PARAM_SCALE ( 1 )

#define MAX_REFERENCE_LEVEL ( 127 )

#define DVB_ANC_DATA_SYNC_BYTE ( 0xBC ) /* DVB ancillary data sync byte. */

/*!
  \brief Initialize DRC information

  \self Handle of DRC info

  \return none
  */
void aacDecoder_drcInit (
    HANDLE_AAC_DRC self )
{
  CDrcParams *pParams;

  if (self == NULL) {
    return;
  }

  /* init control fields */
  self->enable = 0;
  self->numThreads = 0;

  /* init params */
  pParams = &self->params;
  pParams->bsDelayEnable = 0;
  pParams->cut = FL2FXCONST_DBL(0.0f);
  pParams->usrCut = FL2FXCONST_DBL(0.0f);
  pParams->boost = FL2FXCONST_DBL(0.0f);
  pParams->usrBoost = FL2FXCONST_DBL(0.0f);
  pParams->targetRefLevel = -1;
  pParams->expiryFrame = AACDEC_DRC_DFLT_EXPIRY_FRAMES;
  pParams->applyDigitalNorm = 0;
  pParams->applyHeavyCompression = 0;

  /* initial program ref level = target ref level */
  self->progRefLevel = pParams->targetRefLevel;
  self->progRefLevelPresent = 0;
  self->presMode = -1;
}


/*!
  \brief Initialize DRC control data for one channel

  \self Handle of DRC info

  \return none
  */
void aacDecoder_drcInitChannelData (
    CDrcChannelData *pDrcChData )
{
  if (pDrcChData != NULL) {
    pDrcChData->expiryCount = 0;
    pDrcChData->numBands = 1;
    pDrcChData->bandTop[0] = (1024 >> 2) - 1;
    pDrcChData->drcValue[0] = 0;
    pDrcChData->drcInterpolationScheme = 0;
    pDrcChData->drcDataType = UNKNOWN_PAYLOAD;
  }
}


/*!
  \brief Set one single DRC parameter

  \self Handle of DRC info.
  \param Parameter to be set.
  \value Value to be set.

  \return an error code.
  */
AAC_DECODER_ERROR aacDecoder_drcSetParam (
    HANDLE_AAC_DRC self,
    AACDEC_DRC_PARAM param,
    INT value )
{
  AAC_DECODER_ERROR ErrorStatus = AAC_DEC_OK;

  switch (param)
  {
    case DRC_CUT_SCALE:
      /* set attenuation scale factor */
      if ( (value < 0)
          || (value > DRC_MAX_QUANT_FACTOR) ) {
        return AAC_DEC_SET_PARAM_FAIL;
      }
      if (self == NULL) {
        return AAC_DEC_INVALID_HANDLE;
      }
      self->params.usrCut = (FIXP_DBL)((INT)(DRC_PARAM_QUANT_STEP>>DRC_PARAM_SCALE) * (INT)value);
      if (self->params.applyHeavyCompression == 0)
        self->params.cut = self->params.usrCut;
      break;
    case DRC_BOOST_SCALE:
      /* set boost factor */
      if ( (value < 0)
          || (value > DRC_MAX_QUANT_FACTOR) ) {
        return AAC_DEC_SET_PARAM_FAIL;
      }
      if (self == NULL) {
        return AAC_DEC_INVALID_HANDLE;
      }
      self->params.usrBoost = (FIXP_DBL)((INT)(DRC_PARAM_QUANT_STEP>>DRC_PARAM_SCALE) * (INT)value);
      if (self->params.applyHeavyCompression == 0)
        self->params.boost = self->params.usrBoost;
      break;
    case TARGET_REF_LEVEL:
      if ( value > MAX_REFERENCE_LEVEL
          || value < -MAX_REFERENCE_LEVEL ) {
        return AAC_DEC_SET_PARAM_FAIL;
      }
      1 2 3 4 5 [Next][Last]

